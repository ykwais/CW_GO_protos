// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.1
// source: cw/cw.proto

package cwv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Service_Register_FullMethodName            = "/auth.Service/Register"
	Service_Login_FullMethodName               = "/auth.Service/Login"
	Service_ListPhotos_FullMethodName          = "/auth.Service/ListPhotos"
	Service_PhotosForMainScreen_FullMethodName = "/auth.Service/PhotosForMainScreen"
	Service_PhotosOfAutomobile_FullMethodName  = "/auth.Service/PhotosOfAutomobile"
	Service_SelectAuto_FullMethodName          = "/auth.Service/SelectAuto"
	Service_GetUserBookings_FullMethodName     = "/auth.Service/GetUserBookings"
	Service_CancelBooking_FullMethodName       = "/auth.Service/CancelBooking"
)

// ServiceClient is the client API for Service service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceClient interface {
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	ListPhotos(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ListPhotosResponse], error)
	PhotosForMainScreen(ctx context.Context, in *PhotosForMainScreenRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[PhotosForMainScreenResponse], error)
	PhotosOfAutomobile(ctx context.Context, in *PhotosOfAutomobileRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[PhotosOfAutomobileResponse], error)
	SelectAuto(ctx context.Context, in *SelectAutoRequest, opts ...grpc.CallOption) (*SelectAutoResponse, error)
	GetUserBookings(ctx context.Context, in *UserBookingsRequest, opts ...grpc.CallOption) (*UserBookingsResponse, error)
	CancelBooking(ctx context.Context, in *CancelBookingRequest, opts ...grpc.CallOption) (*CancelBookingResponse, error)
}

type serviceClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceClient(cc grpc.ClientConnInterface) ServiceClient {
	return &serviceClient{cc}
}

func (c *serviceClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, Service_Register_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, Service_Login_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) ListPhotos(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ListPhotosResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Service_ServiceDesc.Streams[0], Service_ListPhotos_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[EmptyRequest, ListPhotosResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Service_ListPhotosClient = grpc.ServerStreamingClient[ListPhotosResponse]

func (c *serviceClient) PhotosForMainScreen(ctx context.Context, in *PhotosForMainScreenRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[PhotosForMainScreenResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Service_ServiceDesc.Streams[1], Service_PhotosForMainScreen_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[PhotosForMainScreenRequest, PhotosForMainScreenResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Service_PhotosForMainScreenClient = grpc.ServerStreamingClient[PhotosForMainScreenResponse]

func (c *serviceClient) PhotosOfAutomobile(ctx context.Context, in *PhotosOfAutomobileRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[PhotosOfAutomobileResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Service_ServiceDesc.Streams[2], Service_PhotosOfAutomobile_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[PhotosOfAutomobileRequest, PhotosOfAutomobileResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Service_PhotosOfAutomobileClient = grpc.ServerStreamingClient[PhotosOfAutomobileResponse]

func (c *serviceClient) SelectAuto(ctx context.Context, in *SelectAutoRequest, opts ...grpc.CallOption) (*SelectAutoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SelectAutoResponse)
	err := c.cc.Invoke(ctx, Service_SelectAuto_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) GetUserBookings(ctx context.Context, in *UserBookingsRequest, opts ...grpc.CallOption) (*UserBookingsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserBookingsResponse)
	err := c.cc.Invoke(ctx, Service_GetUserBookings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) CancelBooking(ctx context.Context, in *CancelBookingRequest, opts ...grpc.CallOption) (*CancelBookingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CancelBookingResponse)
	err := c.cc.Invoke(ctx, Service_CancelBooking_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceServer is the server API for Service service.
// All implementations must embed UnimplementedServiceServer
// for forward compatibility.
type ServiceServer interface {
	Register(context.Context, *RegisterRequest) (*RegisterResponse, error)
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	ListPhotos(*EmptyRequest, grpc.ServerStreamingServer[ListPhotosResponse]) error
	PhotosForMainScreen(*PhotosForMainScreenRequest, grpc.ServerStreamingServer[PhotosForMainScreenResponse]) error
	PhotosOfAutomobile(*PhotosOfAutomobileRequest, grpc.ServerStreamingServer[PhotosOfAutomobileResponse]) error
	SelectAuto(context.Context, *SelectAutoRequest) (*SelectAutoResponse, error)
	GetUserBookings(context.Context, *UserBookingsRequest) (*UserBookingsResponse, error)
	CancelBooking(context.Context, *CancelBookingRequest) (*CancelBookingResponse, error)
	mustEmbedUnimplementedServiceServer()
}

// UnimplementedServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedServiceServer struct{}

func (UnimplementedServiceServer) Register(context.Context, *RegisterRequest) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedServiceServer) Login(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedServiceServer) ListPhotos(*EmptyRequest, grpc.ServerStreamingServer[ListPhotosResponse]) error {
	return status.Errorf(codes.Unimplemented, "method ListPhotos not implemented")
}
func (UnimplementedServiceServer) PhotosForMainScreen(*PhotosForMainScreenRequest, grpc.ServerStreamingServer[PhotosForMainScreenResponse]) error {
	return status.Errorf(codes.Unimplemented, "method PhotosForMainScreen not implemented")
}
func (UnimplementedServiceServer) PhotosOfAutomobile(*PhotosOfAutomobileRequest, grpc.ServerStreamingServer[PhotosOfAutomobileResponse]) error {
	return status.Errorf(codes.Unimplemented, "method PhotosOfAutomobile not implemented")
}
func (UnimplementedServiceServer) SelectAuto(context.Context, *SelectAutoRequest) (*SelectAutoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelectAuto not implemented")
}
func (UnimplementedServiceServer) GetUserBookings(context.Context, *UserBookingsRequest) (*UserBookingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserBookings not implemented")
}
func (UnimplementedServiceServer) CancelBooking(context.Context, *CancelBookingRequest) (*CancelBookingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelBooking not implemented")
}
func (UnimplementedServiceServer) mustEmbedUnimplementedServiceServer() {}
func (UnimplementedServiceServer) testEmbeddedByValue()                 {}

// UnsafeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceServer will
// result in compilation errors.
type UnsafeServiceServer interface {
	mustEmbedUnimplementedServiceServer()
}

func RegisterServiceServer(s grpc.ServiceRegistrar, srv ServiceServer) {
	// If the following call pancis, it indicates UnimplementedServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Service_ServiceDesc, srv)
}

func _Service_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_ListPhotos_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EmptyRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ServiceServer).ListPhotos(m, &grpc.GenericServerStream[EmptyRequest, ListPhotosResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Service_ListPhotosServer = grpc.ServerStreamingServer[ListPhotosResponse]

func _Service_PhotosForMainScreen_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PhotosForMainScreenRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ServiceServer).PhotosForMainScreen(m, &grpc.GenericServerStream[PhotosForMainScreenRequest, PhotosForMainScreenResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Service_PhotosForMainScreenServer = grpc.ServerStreamingServer[PhotosForMainScreenResponse]

func _Service_PhotosOfAutomobile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PhotosOfAutomobileRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ServiceServer).PhotosOfAutomobile(m, &grpc.GenericServerStream[PhotosOfAutomobileRequest, PhotosOfAutomobileResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Service_PhotosOfAutomobileServer = grpc.ServerStreamingServer[PhotosOfAutomobileResponse]

func _Service_SelectAuto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SelectAutoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).SelectAuto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_SelectAuto_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).SelectAuto(ctx, req.(*SelectAutoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_GetUserBookings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserBookingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).GetUserBookings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_GetUserBookings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).GetUserBookings(ctx, req.(*UserBookingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_CancelBooking_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelBookingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).CancelBooking(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_CancelBooking_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).CancelBooking(ctx, req.(*CancelBookingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Service_ServiceDesc is the grpc.ServiceDesc for Service service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Service_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "auth.Service",
	HandlerType: (*ServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _Service_Register_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _Service_Login_Handler,
		},
		{
			MethodName: "SelectAuto",
			Handler:    _Service_SelectAuto_Handler,
		},
		{
			MethodName: "GetUserBookings",
			Handler:    _Service_GetUserBookings_Handler,
		},
		{
			MethodName: "CancelBooking",
			Handler:    _Service_CancelBooking_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListPhotos",
			Handler:       _Service_ListPhotos_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "PhotosForMainScreen",
			Handler:       _Service_PhotosForMainScreen_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "PhotosOfAutomobile",
			Handler:       _Service_PhotosOfAutomobile_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "cw/cw.proto",
}
